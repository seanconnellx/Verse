// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2zRvKQ8amGcEx1ePi9rEYj
// Component: nnw_KyxfdT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_verse_2022.module.css"; // plasmic-import: 2zRvKQ8amGcEx1ePi9rEYj/projectcss
import sty from "./PlasmicNavItem.module.css"; // plasmic-import: nnw_KyxfdT/css

export type PlasmicNavItem__VariantMembers = {};

export type PlasmicNavItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavItem__VariantsArgs;
export const PlasmicNavItem__VariantProps = new Array<VariantPropType>();

export type PlasmicNavItem__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavItem__ArgsType;
export const PlasmicNavItem__ArgProps = new Array<ArgPropType>("children");

export type PlasmicNavItem__OverridesType = {
  root?: p.Flex<"div">;
  label?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultNavItemProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicNavItem__RenderFunc(props: {
  variants: PlasmicNavItem__VariantsArgs;
  args: PlasmicNavItem__ArgsType;
  overrides: PlasmicNavItem__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <p.PlasmicLink
          data-plasmic-name={"label"}
          data-plasmic-override={overrides.label}
          className={classNames(projectcss.all, projectcss.a, sty.label)}
          component={Link}
          platform={"nextjs"}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Contact us",
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </p.PlasmicLink>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "label"],
  label: ["label"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  label: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavItem__VariantsArgs;
    args?: PlasmicNavItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavItem__ArgProps,
      internalVariantPropNames: PlasmicNavItem__VariantProps
    });

    return PlasmicNavItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavItem";
  } else {
    func.displayName = `PlasmicNavItem.${nodeName}`;
  }
  return func;
}

export const PlasmicNavItem = Object.assign(
  // Top-level PlasmicNavItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    label: makeNodeComponent("label"),

    // Metadata about props expected for PlasmicNavItem
    internalVariantProps: PlasmicNavItem__VariantProps,
    internalArgProps: PlasmicNavItem__ArgProps
  }
);

export default PlasmicNavItem;
/* prettier-ignore-end */
