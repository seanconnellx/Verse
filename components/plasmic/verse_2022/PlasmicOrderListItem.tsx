// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2zRvKQ8amGcEx1ePi9rEYj
// Component: uB-_kQ49w8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ArrowLight from "../../ArrowLight"; // plasmic-import: YihdW5fuU6/component

import { useScreenVariants as useScreenVariantsdDkTz4I3Sm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dDKTz_4I3sm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_verse_2022.module.css"; // plasmic-import: 2zRvKQ8amGcEx1ePi9rEYj/projectcss
import sty from "./PlasmicOrderListItem.module.css"; // plasmic-import: uB-_kQ49w8/css

export type PlasmicOrderListItem__VariantMembers = {};

export type PlasmicOrderListItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicOrderListItem__VariantsArgs;
export const PlasmicOrderListItem__VariantProps = new Array<VariantPropType>();

export type PlasmicOrderListItem__ArgsType = {
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicOrderListItem__ArgsType;
export const PlasmicOrderListItem__ArgProps = new Array<ArgPropType>("slot");

export type PlasmicOrderListItem__OverridesType = {
  root?: p.Flex<"div">;
  orderListItemLine?: p.Flex<"div">;
  orderListItemNumber?: p.Flex<"div">;
  orderListItemTitle?: p.Flex<"div">;
  arrowLight?: p.Flex<typeof ArrowLight>;
};

export interface DefaultOrderListItemProps {
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicOrderListItem__RenderFunc(props: {
  variants: PlasmicOrderListItem__VariantsArgs;
  args: PlasmicOrderListItem__ArgsType;
  overrides: PlasmicOrderListItem__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdDkTz4I3Sm()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"orderListItemLine"}
          data-plasmic-override={overrides.orderListItemLine}
          hasGap={true}
          className={classNames(projectcss.all, sty.orderListItemLine)}
        >
          <div
            data-plasmic-name={"orderListItemNumber"}
            data-plasmic-override={overrides.orderListItemNumber}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.orderListItemNumber
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly") ? "02" : "01"}
          </div>

          <div
            data-plasmic-name={"orderListItemTitle"}
            data-plasmic-override={overrides.orderListItemTitle}
            className={classNames(projectcss.all, sty.orderListItemTitle)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Design & CX Strategy",
              value: args.slot,
              className: classNames(sty.slotTargetSlot)
            })}
          </div>
        </p.Stack>
      ) : null}

      <ArrowLight
        data-plasmic-name={"arrowLight"}
        data-plasmic-override={overrides.arrowLight}
        className={classNames("__wab_instance", sty.arrowLight)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "orderListItemLine",
    "orderListItemNumber",
    "orderListItemTitle",
    "arrowLight"
  ],
  orderListItemLine: [
    "orderListItemLine",
    "orderListItemNumber",
    "orderListItemTitle"
  ],
  orderListItemNumber: ["orderListItemNumber"],
  orderListItemTitle: ["orderListItemTitle"],
  arrowLight: ["arrowLight"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  orderListItemLine: "div";
  orderListItemNumber: "div";
  orderListItemTitle: "div";
  arrowLight: typeof ArrowLight;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicOrderListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicOrderListItem__VariantsArgs;
    args?: PlasmicOrderListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicOrderListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicOrderListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicOrderListItem__ArgProps,
      internalVariantPropNames: PlasmicOrderListItem__VariantProps
    });

    return PlasmicOrderListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicOrderListItem";
  } else {
    func.displayName = `PlasmicOrderListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicOrderListItem = Object.assign(
  // Top-level PlasmicOrderListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    orderListItemLine: makeNodeComponent("orderListItemLine"),
    orderListItemNumber: makeNodeComponent("orderListItemNumber"),
    orderListItemTitle: makeNodeComponent("orderListItemTitle"),
    arrowLight: makeNodeComponent("arrowLight"),

    // Metadata about props expected for PlasmicOrderListItem
    internalVariantProps: PlasmicOrderListItem__VariantProps,
    internalArgProps: PlasmicOrderListItem__ArgProps
  }
);

export default PlasmicOrderListItem;
/* prettier-ignore-end */
