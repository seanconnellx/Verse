// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2zRvKQ8amGcEx1ePi9rEYj
// Component: 109-CL6gPy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_verse_2022.module.css"; // plasmic-import: 2zRvKQ8amGcEx1ePi9rEYj/projectcss
import sty from "./PlasmicLogoVerseFull.module.css"; // plasmic-import: 109-CL6gPy/css

import VerseLogotypeIcon from "./icons/PlasmicIcon__VerseLogotype"; // plasmic-import: vxdb0Kh_Gb/icon

export type PlasmicLogoVerseFull__VariantMembers = {};

export type PlasmicLogoVerseFull__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogoVerseFull__VariantsArgs;
export const PlasmicLogoVerseFull__VariantProps = new Array<VariantPropType>();

export type PlasmicLogoVerseFull__ArgsType = {};
type ArgPropType = keyof PlasmicLogoVerseFull__ArgsType;
export const PlasmicLogoVerseFull__ArgProps = new Array<ArgPropType>();

export type PlasmicLogoVerseFull__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<typeof p.PlasmicImg>;
  svg?: p.Flex<"svg">;
};

export interface DefaultLogoVerseFullProps {
  className?: string;
}

function PlasmicLogoVerseFull__RenderFunc(props: {
  variants: PlasmicLogoVerseFull__VariantsArgs;
  args: PlasmicLogoVerseFull__ArgsType;
  overrides: PlasmicLogoVerseFull__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      href={"/" as const}
      platform={"nextjs"}
      tabIndex={1 as const}
      title={"verse." as const}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"45px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"48px" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/verse_2022/images/verseLogomark.svg",
          fullWidth: 48,
          fullHeight: 45,
          aspectRatio: 1.066667
        }}
      />

      <VerseLogotypeIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  img: typeof p.PlasmicImg;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogoVerseFull__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogoVerseFull__VariantsArgs;
    args?: PlasmicLogoVerseFull__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLogoVerseFull__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogoVerseFull__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogoVerseFull__ArgProps,
      internalVariantPropNames: PlasmicLogoVerseFull__VariantProps
    });

    return PlasmicLogoVerseFull__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogoVerseFull";
  } else {
    func.displayName = `PlasmicLogoVerseFull.${nodeName}`;
  }
  return func;
}

export const PlasmicLogoVerseFull = Object.assign(
  // Top-level PlasmicLogoVerseFull renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicLogoVerseFull
    internalVariantProps: PlasmicLogoVerseFull__VariantProps,
    internalArgProps: PlasmicLogoVerseFull__ArgProps
  }
);

export default PlasmicLogoVerseFull;
/* prettier-ignore-end */
