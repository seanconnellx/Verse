// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2zRvKQ8amGcEx1ePi9rEYj
// Component: rwLMYuTNcvI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoVerseFull from "../../LogoVerseFull"; // plasmic-import: 109-CL6gPy/component
import NavItem from "../../NavItem"; // plasmic-import: nnw_KyxfdT/component
import NavIconMenu from "../../NavIconMenu"; // plasmic-import: P0VZZmyR4j/component

import { useScreenVariants as useScreenVariantsdDkTz4I3Sm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dDKTz_4I3sm/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_verse_2022.module.css"; // plasmic-import: 2zRvKQ8amGcEx1ePi9rEYj/projectcss
import sty from "./PlasmicNavigation.module.css"; // plasmic-import: rwLMYuTNcvI/css

import Frame2Icon from "./icons/PlasmicIcon__Frame2"; // plasmic-import: tXf__JSEaI/icon

export type PlasmicNavigation__VariantMembers = {};

export type PlasmicNavigation__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavigation__VariantsArgs;
export const PlasmicNavigation__VariantProps = new Array<VariantPropType>();

export type PlasmicNavigation__ArgsType = {};
type ArgPropType = keyof PlasmicNavigation__ArgsType;
export const PlasmicNavigation__ArgProps = new Array<ArgPropType>();

export type PlasmicNavigation__OverridesType = {
  root?: p.Flex<"div">;
  logoArea?: p.Flex<"div">;
  logoVerseFull?: p.Flex<typeof LogoVerseFull>;
  craftcms?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
  rectangle84?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  menuItem?: p.Flex<"div">;
  menuItem2?: p.Flex<"div">;
  menuArea?: p.Flex<"div">;
  navItem?: p.Flex<typeof NavItem>;
  navIconMenu?: p.Flex<typeof NavIconMenu>;
};

export interface DefaultNavigationProps {
  className?: string;
}

function PlasmicNavigation__RenderFunc(props: {
  variants: PlasmicNavigation__VariantsArgs;
  args: PlasmicNavigation__ArgsType;
  overrides: PlasmicNavigation__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdDkTz4I3Sm()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"logoArea"}
        data-plasmic-override={overrides.logoArea}
        hasGap={true}
        className={classNames(projectcss.all, sty.logoArea)}
      >
        <LogoVerseFull
          data-plasmic-name={"logoVerseFull"}
          data-plasmic-override={overrides.logoVerseFull}
          className={classNames("__wab_instance", sty.logoVerseFull)}
        />

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={p.PlasmicLink}
            data-plasmic-name={"craftcms"}
            data-plasmic-override={overrides.craftcms}
            hasGap={true}
            className={classNames(projectcss.all, projectcss.a, sty.craftcms)}
            component={Link}
            platform={"nextjs"}
          >
            <Frame2Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            <div
              data-plasmic-name={"rectangle84"}
              data-plasmic-override={overrides.rectangle84}
              className={classNames(projectcss.all, sty.rectangle84)}
            />

            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"15.889px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"15.917px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/verse_2022/images/tick.svg",
                fullWidth: 15.917,
                fullHeight: 15.889,
                aspectRatio: 1
              }}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"menuItem"}
              data-plasmic-override={overrides.menuItem}
              hasGap={true}
              className={classNames(projectcss.all, sty.menuItem)}
            >
              <div
                data-plasmic-name={"menuItem2"}
                data-plasmic-override={overrides.menuItem2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.menuItem2
                )}
              >
                {"Verified Partner"}
              </div>
            </p.Stack>
          </p.Stack>
        ) : null}
      </p.Stack>

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"menuArea"}
          data-plasmic-override={overrides.menuArea}
          hasGap={true}
          className={classNames(projectcss.all, sty.menuArea)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <NavItem
              data-plasmic-name={"navItem"}
              data-plasmic-override={overrides.navItem}
              className={classNames("__wab_instance", sty.navItem)}
            />
          ) : null}

          <NavIconMenu
            data-plasmic-name={"navIconMenu"}
            data-plasmic-override={overrides.navIconMenu}
            className={classNames("__wab_instance", sty.navIconMenu)}
          />
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "logoArea",
    "logoVerseFull",
    "craftcms",
    "svg",
    "rectangle84",
    "img",
    "menuItem",
    "menuItem2",
    "menuArea",
    "navItem",
    "navIconMenu"
  ],
  logoArea: [
    "logoArea",
    "logoVerseFull",
    "craftcms",
    "svg",
    "rectangle84",
    "img",
    "menuItem",
    "menuItem2"
  ],
  logoVerseFull: ["logoVerseFull"],
  craftcms: ["craftcms", "svg", "rectangle84", "img", "menuItem", "menuItem2"],
  svg: ["svg"],
  rectangle84: ["rectangle84"],
  img: ["img"],
  menuItem: ["menuItem", "menuItem2"],
  menuItem2: ["menuItem2"],
  menuArea: ["menuArea", "navItem", "navIconMenu"],
  navItem: ["navItem"],
  navIconMenu: ["navIconMenu"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logoArea: "div";
  logoVerseFull: typeof LogoVerseFull;
  craftcms: "a";
  svg: "svg";
  rectangle84: "div";
  img: typeof p.PlasmicImg;
  menuItem: "div";
  menuItem2: "div";
  menuArea: "div";
  navItem: typeof NavItem;
  navIconMenu: typeof NavIconMenu;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavigation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavigation__VariantsArgs;
    args?: PlasmicNavigation__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavigation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavigation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavigation__ArgProps,
      internalVariantPropNames: PlasmicNavigation__VariantProps
    });

    return PlasmicNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavigation";
  } else {
    func.displayName = `PlasmicNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicNavigation = Object.assign(
  // Top-level PlasmicNavigation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoArea: makeNodeComponent("logoArea"),
    logoVerseFull: makeNodeComponent("logoVerseFull"),
    craftcms: makeNodeComponent("craftcms"),
    svg: makeNodeComponent("svg"),
    rectangle84: makeNodeComponent("rectangle84"),
    img: makeNodeComponent("img"),
    menuItem: makeNodeComponent("menuItem"),
    menuItem2: makeNodeComponent("menuItem2"),
    menuArea: makeNodeComponent("menuArea"),
    navItem: makeNodeComponent("navItem"),
    navIconMenu: makeNodeComponent("navIconMenu"),

    // Metadata about props expected for PlasmicNavigation
    internalVariantProps: PlasmicNavigation__VariantProps,
    internalArgProps: PlasmicNavigation__ArgProps
  }
);

export default PlasmicNavigation;
/* prettier-ignore-end */
